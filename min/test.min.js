"use strict;";function setUpDemonstration(){var e=jQuery("#demonodeA1"),t=jQuery("#demonodeB1"),n=jQuery("#demonodeC1"),o=jQuery("#demonodeD1"),r=jQuery("#demonodeA2"),s=jQuery("#demonodeB2"),d=jQuery("#demonodeC2"),c=jQuery("#demonodeD2"),v=function(e,t){var n,o=e,r=t,s=jQuery(o).css("background-color");return function(){n&&clearTimeout(n),jQuery(o).css("background-color",r),n=setTimeout(function(){jQuery(o).css("background-color")===r&&jQuery(o).css("background-color",s)},2500)}},a=new eventNode,i=new eventNode,g=new eventNode,h=new eventNode,l=new eventNode,E=new eventNode,w=new eventNode,N=new eventNode;a.connectNode(i),i.connectNode(g),g.connectNode(h),l.connectNode(E),E.connectNode(w),w.connectNode(N),a.addEvent("A"),a.addEvent("B"),a.addEvent("C"),a.addEvent("D"),l.addEvent("A"),l.addEvent("B"),l.addEvent("C"),l.addEvent("D");var k="rgb(166, 45, 45)",T="rgb(45, 166, 45)",u="rgb(144, 144, 144)",D="rgb(144, 66, 144)";a.addEventListener("A",v(e,k)),a.addEventListener("B",v(e,T)),i.addEventListener("B",v(t,T)),i.addEventListener("C",v(t,D)),g.addEventListener("A",v(n,k)),g.addEventListener("C",v(n,D)),g.addEventListener("D",v(n,u)),h.addEventListener("A",v(o,k)),h.addEventListener("B",v(o,T)),h.addEventListener("D",v(o,u)),l.addEventListener("A",v(r,k)),l.addEventListener("B",v(r,T)),l.addEventListener("C",v(r,D)),E.addEventListener("A",v(s,k)),E.addEventListener("C",v(s,D)),E.addEventListener("D",v(s,u)),w.addEventListener("A",v(d,k)),w.addEventListener("C",v(d,D)),N.addEventListener("B",v(c,T)),N.addEventListener("D",v(c,u)),jQuery("#trigger-A1").click(function(){a.triggerEvent("A")}),jQuery("#trigger-B1").click(function(){i.triggerEvent("B")}),jQuery("#trigger-C1").click(function(){g.triggerEvent("C")}),jQuery("#trigger-D1").click(function(){h.triggerEvent("D")}),jQuery("#trigger-A2").click(function(){l.triggerEvent("A")}),jQuery("#trigger-B2").click(function(){E.triggerEvent("B")}),jQuery("#trigger-C2").click(function(){w.triggerEvent("C")}),jQuery("#trigger-D2").click(function(){N.triggerEvent("D")}),jQuery("#toggleNetworkConnection").click(function(){a.connectNode(l)?jQuery(this).text("Disconnect the networks"):(a.disconnectNode(l),jQuery(this).text("Connect the networks"))})}jQuery(document).ready(function(){function e(e){var t=e;return function(){console.log(t)}}var t=new eventNode,n=new eventNode,o=new eventNode,r=new eventNode;t.addEvent("test1"),t.addEvent("test2"),t.addEvent("test3"),t.addEvent("test4"),t.addEventListener("test1",e("pr1 test1")),t.addEventListener("test2",e("pr1 test2")),t.addEventListener("test3",e("pr1 test3")),t.addEventListener("test4",e("pr1 test4")),n.addEvent("test2"),n.addEvent("test3"),n.addEvent("test4"),n.addEventListener("test2",e("pr2 test2")),n.addEventListener("test3",e("pr2 test3")),n.addEventListener("test4",e("pr2 test4")),o.addEvent("test3"),o.addEvent("test4"),o.addEventListener("test3",e("pr3 test3")),o.addEventListener("test4",e("pr3 test4")),r.addEvent("test1"),r.addEvent("test4"),r.addEvent("test8"),r.addEventListener("test1",e("pr4 test1")),r.addEventListener("test4",e("pr4 test4")),r.addEventListener("test8",e("pr4 test8")),console.log("Non-connected node tests:"),t.triggerEvent("test1"),n.triggerEvent("test2"),o.triggerEvent("test3"),r.triggerEvent("test4"),t.connectNode(n),n.connectNode(o),o.connectNode(r),console.log("Connnected node tests:"),t.triggerEvent("test1"),n.triggerEvent("test2"),o.triggerEvent("test3"),r.triggerEvent("test4"),t.connectNode(n),t.connectNode(o),t.connectNode(r),n.connectNode(t),n.connectNode(o),n.connectNode(r),o.connectNode(t),o.connectNode(n),o.connectNode(r),r.connectNode(t),r.connectNode(n),r.connectNode(o),console.log("Completely connnected node tests:"),t.triggerEvent("test1"),n.triggerEvent("test2"),o.triggerEvent("test3"),r.triggerEvent("test4"),console.log("Network should now contain four nodes."),console.log("Nodes in network from pr1:"+t.getNetworkNodes().length),console.log("Nodes in network from pr2:"+n.getNetworkNodes().length),console.log("Creating a more complex network and connecting it...");var s=new eventNode,d=new eventNode,c=new eventNode,v=new eventNode,a=new eventNode,i=new eventNode,g=new eventNode,h=new eventNode,l=new eventNode;console.log("Network should now contain nine nodes."),s.connectNode(d),d.connectNode(c),c.connectNode(l),l.connectNode(h),h.connectNode(g),g.connectNode(i),i.connectNode(v),v.connectNode(a),console.log("Nodes in network from a1: "+s.getNetworkNodes().length),console.log("Nodes in network from a5: "+a.getNetworkNodes().length),console.log("Nodes in network from a9: "+l.getNetworkNodes().length),console.log("Network node identifiers:\n"+l.getNetworkIdentifiers().join(",\n")),console.log("Adding events FringeTester to nodes a1 and a4..."),console.log("Adding events ThreeTester to nodes a1, a6 and a9..."),s.addEvent("FringeTester"),v.addEvent("FringeTester"),i.addEvent("ThreeTester"),s.addEvent("ThreeTester"),l.addEvent("ThreeTester"),console.log("Does a1 have the event FringeTester? "+s.hasEvent("FringeTester")),console.log("Does a2 have the event FringeTester? "+d.hasEvent("FringeTester")),console.log("Does a3 have the event FringeTester? "+c.hasEvent("FringeTester")),console.log("Does a4 have the event FringeTester? "+v.hasEvent("FringeTester")),console.log("Does a5 have the event FringeTester? "+a.hasEvent("FringeTester")),console.log("Does the network connected to a2 have the event FringeTester? "+d.networkHasEvent("FringeTester")),console.log("Does the network connected to a3 have the event FringeTester? "+c.networkHasEvent("FringeTester")),console.log("Does the network connected to a4 have the event FringeTester? "+v.networkHasEvent("FringeTester")),console.log("Does a1 have the event ThreeTester? "+s.hasEvent("ThreeTester")),console.log("Does a2 have the event ThreeTester? "+d.hasEvent("ThreeTester")),console.log("Does a5 have the event ThreeTester? "+a.hasEvent("ThreeTester")),console.log("Does a6 have the event ThreeTester? "+i.hasEvent("ThreeTester")),console.log("Does a8 have the event ThreeTester? "+h.hasEvent("ThreeTester")),console.log("Does a9 have the event ThreeTester? "+l.hasEvent("ThreeTester")),console.log("Does the network connected to a2 have the event ThreeTester? "+d.networkHasEvent("ThreeTester")),console.log("Does the network connected to a3 have the event ThreeTester? "+c.networkHasEvent("ThreeTester")),console.log("Does the network connected to a8 have the event ThreeTester? "+h.networkHasEvent("ThreeTester")),console.log("Does the network connected to a8 have the event DoesNotExist? "+h.networkHasEvent("DoesNotExist")),console.log("Does the network connected to a2 have the event DoesNotExist? "+d.networkHasEvent("DoesNotExist")),console.log("And now, let's connect the aX network to the prX network!"),s.connectNode(t),console.log("Does the network connected to a1 have the event test1? "+s.networkHasEvent("test1")),console.log("Does the network connected to a9 have the event test1? "+l.networkHasEvent("test1")),console.log("Does the network connected to pr3 have the event ThreeTester? "+o.networkHasEvent("ThreeTester")),console.log("And let's disconnect the two networks, and rerun."),t.disconnectNode(s),console.log("Does the network connected to a1 have the event test1? "+s.networkHasEvent("test1")),console.log("Does the network connected to a9 have the event test1? "+l.networkHasEvent("test1")),console.log("Does the network connected to pr3 have the event ThreeTester? "+o.networkHasEvent("ThreeTester")),console.log("Now let's separate the aX network into two networks by splitting at a9, and adding an event to either."),l.disconnectNode(h),l.addEvent("FirstNetwork"),h.addEvent("SecondNetwork"),console.log("Does the network connected to a9 have the event FirstNetwork? "+l.networkHasEvent("FirstNetwork")),console.log("Does the network connected to a9 have the event SecondNetwork? "+l.networkHasEvent("SecondNetwork")),console.log("Does the network connected to a8 have the event FirstNetwork? "+h.networkHasEvent("FirstNetwork")),console.log("Does the network connected to a8 have the event SecondNetwork? "+h.networkHasEvent("SecondNetwork")),console.log("Reconnecting networks via nodes a4 and a3 and rerunning tests."),v.connectNode(c),console.log("Does the network connected to a9 have the event FirstNetwork? "+l.networkHasEvent("FirstNetwork")),console.log("Does the network connected to a9 have the event SecondNetwork? "+l.networkHasEvent("SecondNetwork")),console.log("Does the network connected to a8 have the event FirstNetwork? "+h.networkHasEvent("FirstNetwork")),console.log("Does the network connected to a8 have the event SecondNetwork? "+h.networkHasEvent("SecondNetwork")),setUpDemonstration()});