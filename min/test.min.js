function setUpDemonstration(){var e=jQuery("#demonodeA"),n=jQuery("#demonodeB"),o=jQuery("#demonodeC"),s=jQuery("#demonodeD"),r=new eventNode,d=new eventNode,c=new eventNode,a=new eventNode,v=function(e,n){var o,s,d=e,c=n;return function(){o||(o=!0,s=jQuery(d).css("background-color"),jQuery(d).css("background-color",c),t=setTimeout(function(){jQuery(d).css("background-color",s),setTimeout(function(){r.triggerEvent("enableButtons"),o=!1},200)},1500))}};r.connectNode(d),d.connectNode(c),c.connectNode(a),r.addEvent("A"),r.addEvent("B"),r.addEvent("C"),r.addEvent("D"),r.addEventListener("A",v(e,"red")),r.addEventListener("B",v(e,"green")),d.addEventListener("B",v(n,"green")),d.addEventListener("C",v(n,"purple")),c.addEventListener("A",v(o,"red")),c.addEventListener("C",v(o,"purple")),c.addEventListener("D",v(o,"aliceblue")),a.addEventListener("A",v(s,"red")),a.addEventListener("B",v(s,"green")),a.addEventListener("D",v(s,"aliceblue"));var i=!1,g=new eventNode;g.addEvent("disableButtons"),g.addEvent("enableButtons"),r.connectNode(g),g.addEventListener("disableButtons",function(){i=!0}),g.addEventListener("enableButtons",function(){i=!1}),g.addEventListener("disableButtons",function(){jQuery(".neat-button").addClass("disabled")}),g.addEventListener("enableButtons",function(){jQuery(".neat-button").removeClass("disabled")}),jQuery("#trigger-A").click(function(){i||(r.triggerEvent("A"),r.triggerEvent("disableButtons"))}),jQuery("#trigger-B").click(function(){i||(d.triggerEvent("B"),r.triggerEvent("disableButtons"))}),jQuery("#trigger-C").click(function(){i||(c.triggerEvent("C"),r.triggerEvent("disableButtons"))}),jQuery("#trigger-D").click(function(){i||(a.triggerEvent("D"),r.triggerEvent("disableButtons"))})}jQuery(document).ready(function(){function e(e){var t=e;return function(){console.log(t)}}var t=new eventNode,n=new eventNode,o=new eventNode,s=new eventNode;t.addEvent("test1"),t.addEvent("test2"),t.addEvent("test3"),t.addEvent("test4"),t.addEventListener("test1",e("pr1 test1")),t.addEventListener("test2",e("pr1 test2")),t.addEventListener("test3",e("pr1 test3")),t.addEventListener("test4",e("pr1 test4")),n.addEvent("test2"),n.addEvent("test3"),n.addEvent("test4"),n.addEventListener("test2",e("pr2 test2")),n.addEventListener("test3",e("pr2 test3")),n.addEventListener("test4",e("pr2 test4")),o.addEvent("test3"),o.addEvent("test4"),o.addEventListener("test3",e("pr3 test3")),o.addEventListener("test4",e("pr3 test4")),s.addEvent("test1"),s.addEvent("test4"),s.addEvent("test8"),s.addEventListener("test1",e("pr4 test1")),s.addEventListener("test4",e("pr4 test4")),s.addEventListener("test8",e("pr4 test8")),console.log("Non-connected node tests:"),t.triggerEvent("test1"),n.triggerEvent("test2"),o.triggerEvent("test3"),s.triggerEvent("test4"),t.connectNode(n),n.connectNode(o),o.connectNode(s),console.log("Connnected node tests:"),t.triggerEvent("test1"),n.triggerEvent("test2"),o.triggerEvent("test3"),s.triggerEvent("test4"),t.connectNode(n),t.connectNode(o),t.connectNode(s),n.connectNode(t),n.connectNode(o),n.connectNode(s),o.connectNode(t),o.connectNode(n),o.connectNode(s),s.connectNode(t),s.connectNode(n),s.connectNode(o),console.log("Completely connnected node tests:"),t.triggerEvent("test1"),n.triggerEvent("test2"),o.triggerEvent("test3"),s.triggerEvent("test4"),console.log("Network should now contain four nodes."),console.log("Nodes in network from pr1:"+t.getNetworkNodes().length),console.log("Nodes in network from pr2:"+n.getNetworkNodes().length),console.log("Creating a more complex network and connecting it...");var r=new eventNode,d=new eventNode,c=new eventNode,a=new eventNode,v=new eventNode,i=new eventNode,g=new eventNode,l=new eventNode,h=new eventNode;console.log("Network should now contain nine nodes."),r.connectNode(d),d.connectNode(c),c.connectNode(h),h.connectNode(l),l.connectNode(g),g.connectNode(i),i.connectNode(a),a.connectNode(v),console.log("Nodes in network from a1: "+r.getNetworkNodes().length),console.log("Nodes in network from a5: "+v.getNetworkNodes().length),console.log("Nodes in network from a9: "+h.getNetworkNodes().length),console.log("Network node identifiers:\n"+h.getNetworkIdentifiers().join(",\n")),console.log("Adding events FringeTester to nodes a1 and a4..."),console.log("Adding events ThreeTester to nodes a1, a6 and a9..."),r.addEvent("FringeTester"),a.addEvent("FringeTester"),i.addEvent("ThreeTester"),r.addEvent("ThreeTester"),h.addEvent("ThreeTester"),console.log("Does a1 have the event FringeTester? "+r.hasEvent("FringeTester")),console.log("Does a2 have the event FringeTester? "+d.hasEvent("FringeTester")),console.log("Does a3 have the event FringeTester? "+c.hasEvent("FringeTester")),console.log("Does a4 have the event FringeTester? "+a.hasEvent("FringeTester")),console.log("Does a5 have the event FringeTester? "+v.hasEvent("FringeTester")),console.log("Does the network connected to a2 have the event FringeTester? "+d.networkHasEvent("FringeTester")),console.log("Does the network connected to a3 have the event FringeTester? "+c.networkHasEvent("FringeTester")),console.log("Does the network connected to a4 have the event FringeTester? "+a.networkHasEvent("FringeTester")),console.log("Does a1 have the event ThreeTester? "+r.hasEvent("ThreeTester")),console.log("Does a2 have the event ThreeTester? "+d.hasEvent("ThreeTester")),console.log("Does a5 have the event ThreeTester? "+v.hasEvent("ThreeTester")),console.log("Does a6 have the event ThreeTester? "+i.hasEvent("ThreeTester")),console.log("Does a8 have the event ThreeTester? "+l.hasEvent("ThreeTester")),console.log("Does a9 have the event ThreeTester? "+h.hasEvent("ThreeTester")),console.log("Does the network connected to a2 have the event ThreeTester? "+d.networkHasEvent("ThreeTester")),console.log("Does the network connected to a3 have the event ThreeTester? "+c.networkHasEvent("ThreeTester")),console.log("Does the network connected to a8 have the event ThreeTester? "+l.networkHasEvent("ThreeTester")),console.log("Does the network connected to a8 have the event DoesNotExist? "+l.networkHasEvent("DoesNotExist")),console.log("Does the network connected to a2 have the event DoesNotExist? "+d.networkHasEvent("DoesNotExist")),console.log("And now, let's connect the aX network to the prX network!"),r.connectNode(t),console.log("Does the network connected to a1 have the event test1? "+r.networkHasEvent("test1")),console.log("Does the network connected to a9 have the event test1? "+h.networkHasEvent("test1")),console.log("Does the network connected to pr3 have the event ThreeTester? "+o.networkHasEvent("ThreeTester")),console.log("And let's disconnect the two networks, and rerun."),t.disconnectNode(r),console.log("Does the network connected to a1 have the event test1? "+r.networkHasEvent("test1")),console.log("Does the network connected to a9 have the event test1? "+h.networkHasEvent("test1")),console.log("Does the network connected to pr3 have the event ThreeTester? "+o.networkHasEvent("ThreeTester")),console.log("Now let's separate the aX network into two networks by splitting at a9, and adding an event to either."),h.disconnectNode(l),h.addEvent("FirstNetwork"),l.addEvent("SecondNetwork"),console.log("Does the network connected to a9 have the event FirstNetwork? "+h.networkHasEvent("FirstNetwork")),console.log("Does the network connected to a9 have the event SecondNetwork? "+h.networkHasEvent("SecondNetwork")),console.log("Does the network connected to a8 have the event FirstNetwork? "+l.networkHasEvent("FirstNetwork")),console.log("Does the network connected to a8 have the event SecondNetwork? "+l.networkHasEvent("SecondNetwork")),console.log("Reconnecting networks via nodes a4 and a3 and rerunning tests."),a.connectNode(c),console.log("Does the network connected to a9 have the event FirstNetwork? "+h.networkHasEvent("FirstNetwork")),console.log("Does the network connected to a9 have the event SecondNetwork? "+h.networkHasEvent("SecondNetwork")),console.log("Does the network connected to a8 have the event FirstNetwork? "+l.networkHasEvent("FirstNetwork")),console.log("Does the network connected to a8 have the event SecondNetwork? "+l.networkHasEvent("SecondNetwork")),setUpDemonstration()});